# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@2.4.0

commands:
  checkout_with_submodules:
    description: "Installs git submodules recursively"
    steps:
      - checkout
      - run: git submodule update --init --recursive

  install_cmake:
    description: "Installs CMake"
    parameters:
      package_manager:
        type: string
      sudo:
        type: boolean
    steps:
      - run: >-
          <<# parameters.sudo >> sudo <</ parameters.sudo>> 
          << parameters.package_manager >> install cmake -y

  restore_third_party_cache:
    description: "Restores cache for 3rd party libraries and cmake files"
    steps:
      - run: echo $(git ls-tree HEAD third_party/spdlog | awk {'print $3'}) >.spdlog_hash
      - run: echo $(git ls-tree HEAD third_party/Catch2 | awk {'print $3'}) >.catch2_hash
      - restore_cache:
          key: spdlogcache-v3-{{ checksum ".spdlog_hash" }}
      - restore_cache:
          key: catch2cache-v4-{{ checksum ".catch2_hash" }} 

  save_third_party_cache:
    description: "Saves cache for 3rd party libraries and cmake files"
    steps:
      - save_cache:
          key: spdlogcache-v3-{{ checksum ".spdlog_hash" }}
          paths: 
            - bin/spdlog
            - build/spdlog
      - save_cache:
          key: catch2cache-v4-{{ checksum ".catch2_hash" }}
          paths:
            - bin/Catch2
            - build/Catch2

  build:
    description: "Configures and builds project with cmake"
    parameters:
      windows:
        type: boolean
        default: false
    steps:
      - run: >-
          <<# parameters.windows >> $Env:Path+=";$Env:ProgramFiles\CMake\bin"; <</ parameters.windows >>
          cmake . -Bbuild;
          cd build;
          cmake --build .
  test:
    description: "Tests and stores results"
    parameters:
      windows:
        type: boolean
        default: false
    steps:
      - run: >-
          cd build; 
          mkdir testresults; 
          tests/engineTests -r junit           
          <<# parameters.windows >> 
            | Out-File -FilePath testresults\testEngine.xml -Encoding ASCII 
          <</ parameters.windows >>
          <<^ parameters.windows >> >testresults/testEngine.xml <</ parameters.windows >>
      - store_test_results:
          path: 'build/testresults'

  clang_tidy:
    description: "Runs clang-tidy on changed files"
    steps:
      - run: >-
          git --no-pager diff --name-only main HEAD |
          { grep -E '*.cpp' || test $? = 1; } |
          xargs -I{} clang-tidy {} -- -isystem bin/spdlog/include -Isrc --std=c++17

  clang_format:
    description: "Runs clang-format on changed files"
    steps:
      - run: >-
          git --no-pager diff --name-only main HEAD |
          grep -E '*.cpp|*.h' |
          xargs clang-format --dry-run --Werror

  fullbuild_linux:
    description: "Full linux build with caching"
    steps:
      - checkout_with_submodules
      - run: "sudo apt-get update"
      - install_cmake:
          sudo: true
          package_manager: "apt-get"
      - restore_third_party_cache
      - build
      - save_third_party_cache

  fullbuild_windows:
    description: "Full windows build"
    steps:
      - checkout_with_submodules
      - install_cmake:
          sudo: false
          package_manager: "choco"
      - build

jobs:
  linux-gcc:
    docker:
      - image: cimg/base:2021.04
    environment:
      CC: gcc-9
      CXX: g++-9
    steps:
      - fullbuild_linux
      - test
  windows:
    executor: win/default
    steps:
      - fullbuild_windows
      - test
  lint:
    docker:
      - image: cimg/base:2021.04
    environment:
      CC: gcc-9
      CXX: g++-9
    steps:
      - fullbuild_linux
      - clang_tidy
  format:
    docker:
      - image: cimg/base:2021.04
    environment:
      CC: gcc-9
      CXX: g++-9
    steps:
      - checkout
      - run: "sudo apt-get update && sudo apt-get install clang-format"
      - clang_format

workflows:
  version: 2
  commit:
    jobs:
      - linux-gcc
      - lint
      - format
  nightly:
    jobs:
      - linux-gcc
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only: main